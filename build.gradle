plugins {
    id 'java'
    id 'application'
    id 'groovy'
}

repositories {
    jcenter()
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation 'info.picocli:picocli:3.9.6'
    runtime 'info.picocli:picocli-codegen:3.9.6'
    runtime 'jline:jline:2.14.6'

    testImplementation 'org.graalvm:graal-sdk:1.0.0-rc7'

    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.4'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:1.2-groovy-2.5'
    testImplementation 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'hands.on.fibonacci.FibonacciOnGraal'

task copyRuntimeLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

assemble.finalizedBy copyRuntimeLibs

task reflectionConfigGenerator(description: 'Generate reflection config', dependsOn: 'assemble', type: JavaExec) {
    main = 'picocli.codegen.aot.graalvm.ReflectionConfigGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args = ['hands.on.fibonacci.FibonacciOnGraal', '--output', 'build/reflect.json']
}

task graalNativeImage(description: 'Generate native image with GraalVM', dependsOn: 'reflectionConfigGenerator', type: Exec) {
    workingDir "$buildDir"
    commandLine = [
            'native-image',
            '-cp', 'libs/picocli-3.9.6.jar:libs/picocli-codegen-3.9.6.jar:libs/jline-2.14.6.jar:libs/fast-fibonacci.jar',
            '-H:ReflectionConfigurationFiles=reflect.json',
            '-H:+ReportUnsupportedElementsAtRuntime',
            '--delay-class-initialization-to-runtime=org.fusesource.jansi.WindowsAnsiOutputStream',
            '--no-server',
            'hands.on.fibonacci.FibonacciOnGraal'
    ]
}

task recursiveFibonacci(description: 'Run recursive Fibonacci', dependsOn: 'classes', type: JavaExec) {
    main = 'hands.on.fibonacci.FibonacciOnGraal'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-a', 'RECURSIVE', '42']
}

task dynamicFibonacci(description: 'Run dynamic Fibonacci', dependsOn: 'classes', type: JavaExec) {
    main = 'hands.on.fibonacci.FibonacciOnGraal'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-a', 'DYNAMIC', '123']
}

task matrixFibonacci(description: 'Run matrix Fibonacci', dependsOn: 'classes', type: JavaExec) {
    main = 'hands.on.fibonacci.FibonacciOnGraal'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-a', 'MATRIX', '123']
}

task doublingFibonacci(description: 'Run doubling Fibonacci', dependsOn: 'classes', type: JavaExec) {
    main = 'hands.on.fibonacci.FibonacciOnGraal'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-a', 'DOUBLING', '123']
}
